{
	"info": {
		"_postman_id": "a5b7c9d0-e2f4-6g8h-i0j2-k4l6m8n0p2q4",
		"name": "Dispute Resolution System E2E",
		"description": "End-to-end testing flows for the dispute resolution system, including dispute processing, SLA monitoring, audit trail, and compliance reporting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "0. Database Operations",
			"item": [
				{
					"name": "Reset Case Officers",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/reset-officers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"reset-officers"
							]
						},
						"description": "Delete all case officers from the database and clean up related data"
					},
					"response": []
				},
				{
					"name": "Create Test Officers",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/create-officers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"create-officers"
							]
						},
						"description": "Create test case officers of different levels in the database"
					},
					"response": []
				},
				{
					"name": "Reset Workloads",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/reset-workloads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"reset-workloads"
							]
						},
						"description": "Reset all officer workloads to 0"
					},
					"response": []
				},
				{
					"name": "Set Max Officer Capacity",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/max-officer-capacity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"max-officer-capacity"
							]
						},
						"description": "Set all officers to their maximum capacity (useful for testing assignment failures)"
					},
					"response": []
				},
				{
					"name": "Create Test Users",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/create-test-users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"create-test-users"
							]
						},
						"description": "Create test users with PII data for testing dispute submission"
					},
					"response": []
				},
				{
					"name": "Sync Camunda Users",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/sync-camunda-users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"sync-camunda-users"
							]
						},
						"description": "Synchronize all case officers with Camunda user records"
					},
					"response": []
				}
			],
			"description": "Database setup and management operations for testing"
		},
		{
			"name": "1. Dispute Processing Flow",
			"item": [
				{
					"name": "Submit New Dispute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.caseId) {",
									"    pm.collectionVariables.set(\"disputeCaseId\", jsonData.caseId);",
									"    console.log(\"Set dispute case ID to: \" + jsonData.caseId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"john_user1\",\n    \"disputeType\": \"incorrect_info\",\n    \"creditReportId\": \"CR-E2E-TEST\",\n    \"userFullName\": \"John Doe\",\n    \"userAddress\": \"123 Main St, Anytown, CA 92345\",\n    \"userPhoneNumber\": \"555-123-4567\",\n    \"userEmailAddress\": \"john_user1@example.com\",\n    \"description\": \"This is a test dispute for E2E testing.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/disputes/submit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"submit"
							]
						},
						"description": "Create a new dispute to initiate the process"
					},
					"response": []
				},
				{
					"name": "Submit Dispute with Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.caseId) {",
									"    pm.collectionVariables.set(\"disputeCaseId\", jsonData.caseId);",
									"    console.log(\"Set dispute case ID to: \" + jsonData.caseId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userId",
									"value": "john_user1",
									"type": "text"
								},
								{
									"key": "disputeType",
									"value": "incorrect_info",
									"type": "text"
								},
								{
									"key": "creditReportId",
									"value": "CR-E2E-FILE-TEST",
									"type": "text"
								},
								{
									"key": "userFullName",
									"value": "John Doe",
									"type": "text"
								},
								{
									"key": "userAddress",
									"value": "123 Main St, Anytown, CA 92345",
									"type": "text"
								},
								{
									"key": "userPhoneNumber",
									"value": "555-123-4567",
									"type": "text"
								},
								{
									"key": "userEmailAddress",
									"value": "john_user1@example.com",
									"type": "text"
								},
								{
									"key": "description",
									"value": "This is a test dispute with document upload for E2E testing.",
									"type": "text"
								},
								{
									"key": "documents",
									"type": "file",
									"src": "/path/to/your/document.pdf",
									"description": "Supporting document for the dispute"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/disputes/submit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"submit"
							]
						},
						"description": "Create a new dispute with document attachment"
					},
					"response": []
				},
				{
					"name": "Get Dispute Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/disputes/{{disputeCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{disputeCaseId}}"
							]
						},
						"description": "Retrieve details of the created dispute"
					},
					"response": []
				},
				{
					"name": "Get Dispute Documents",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/disputes/{{disputeCaseId}}/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{disputeCaseId}}",
								"documents"
							]
						},
						"description": "Retrieve documents attached to the dispute"
					},
					"response": []
				},
				{
					"name": "Get PII Comparison",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/disputes/{{disputeCaseId}}/pii-comparison",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{disputeCaseId}}",
								"pii-comparison"
							]
						},
						"description": "Retrieve PII comparison data for the dispute"
					},
					"response": []
				},
				{
					"name": "Update PII Validation Status",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/disputes/{{disputeCaseId}}/pii-validation?status=MATCH&notes=PII data has been verified and matches our records",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{disputeCaseId}}",
								"pii-validation"
							],
							"query": [
								{
									"key": "status",
									"value": "MATCH",
									"description": "Options: MATCH, MISMATCH, PENDING"
								},
								{
									"key": "notes",
									"value": "PII data has been verified and matches our records",
									"description": "Optional notes about the validation"
								}
							]
						},
						"description": "Update the PII validation status for the dispute"
					},
					"response": []
				},
				{
					"name": "Set SLA Deadline (1 min from now)",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/set-sla-deadline/{{disputeCaseId}}/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"set-sla-deadline",
								"{{disputeCaseId}}",
								"1"
							]
						},
						"description": "Set the SLA deadline to 1 minute from now for testing"
					},
					"response": []
				},
				{
					"name": "Verify Dispute Creation in Audit Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/audit/disputes/{{disputeCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{disputeCaseId}}"
							]
						},
						"description": "Verify that dispute creation was properly logged"
					},
					"response": []
				}
			],
			"description": "Basic dispute creation and validation flow"
		},
		{
			"name": "2. SLA Monitoring Flow",
			"item": [
				{
					"name": "Trigger SLA Monitoring",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/monitor-sla",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"monitor-sla"
							]
						},
						"description": "Trigger the SLA monitoring process manually"
					},
					"response": []
				},
				{
					"name": "Check SLA Status After Monitoring",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/disputes/{{disputeCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{disputeCaseId}}"
							]
						},
						"description": "Check if dispute status has been updated by SLA monitoring"
					},
					"response": []
				},
				{
					"name": "Verify SLA Monitoring in Audit Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/audit/disputes/{{disputeCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"audit",
								"disputes",
								"{{disputeCaseId}}"
							]
						},
						"description": "Verify that SLA monitoring actions were logged"
					},
					"response": []
				},
				{
					"name": "Check SLA Violation Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/audit/actions/SLA_VIOLATION?startDate={{isoStartDate}}&endDate={{isoEndDate}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"audit",
								"actions",
								"SLA_VIOLATION"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{isoStartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{isoEndDate}}"
								}
							]
						},
						"description": "Check for SLA violations in the audit logs"
					},
					"response": []
				},
				{
					"name": "Simulate Timer Expiration",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/simulate-timer/{{disputeCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"simulate-timer",
								"{{disputeCaseId}}"
							]
						},
						"description": "Simulate the expiration of an SLA timer"
					},
					"response": []
				},
				{
					"name": "Verify Escalation in Dispute Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/disputes/{{disputeCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{disputeCaseId}}"
							]
						},
						"description": "Verify that the dispute was escalated after timer expiration"
					},
					"response": []
				},
				{
					"name": "Verify Escalation in Audit Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/audit/actions/ESCALATION?startDate={{isoStartDate}}&endDate={{isoEndDate}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"audit",
								"actions",
								"ESCALATION"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{isoStartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{isoEndDate}}"
								}
							]
						},
						"description": "Verify that the escalation was properly logged"
					},
					"response": []
				}
			],
			"description": "Testing the SLA monitoring and escalation process"
		},
		{
			"name": "3. Report Generation Flow",
			"item": [
				{
					"name": "Generate Monthly Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.reportId) {",
									"    pm.collectionVariables.set(\"reportId\", jsonData.reportId);",
									"    console.log(\"Set report ID to: \" + jsonData.reportId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reports/monthly?year={{currentYear}}&month={{currentMonth}}&format=JSON",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reports",
								"monthly"
							],
							"query": [
								{
									"key": "year",
									"value": "{{currentYear}}"
								},
								{
									"key": "month",
									"value": "{{currentMonth}}"
								},
								{
									"key": "format",
									"value": "JSON"
								}
							]
						},
						"description": "Generate a monthly compliance report"
					},
					"response": []
				},
				{
					"name": "Get Report Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reports/{{reportId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reports",
								"{{reportId}}"
							]
						},
						"description": "Retrieve the details of the generated report"
					},
					"response": []
				},
				{
					"name": "Download Report",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reports/{{reportId}}/download",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reports",
								"{{reportId}}",
								"download"
							]
						},
						"description": "Download the report file"
					},
					"response": []
				},
				{
					"name": "Distribute Report",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reports/{{reportId}}/distribute?recipients=admin@example.com,manager@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reports",
								"{{reportId}}",
								"distribute"
							],
							"query": [
								{
									"key": "recipients",
									"value": "admin@example.com,manager@example.com"
								}
							]
						},
						"description": "Distribute the report to recipients"
					},
					"response": []
				}
			],
			"description": "Testing the report generation and distribution process"
		},
		{
			"name": "4. Camunda Process Flow",
			"item": [
				{
					"name": "Start Report Generation Process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.processInstanceId) {",
									"    pm.collectionVariables.set(\"processInstanceId\", jsonData.processInstanceId);",
									"    console.log(\"Set process instance ID to: \" + jsonData.processInstanceId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reports/process/start?year={{currentYear}}&month={{currentMonth}}&format=JSON&recipients=admin@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reports",
								"process",
								"start"
							],
							"query": [
								{
									"key": "year",
									"value": "{{currentYear}}"
								},
								{
									"key": "month",
									"value": "{{currentMonth}}"
								},
								{
									"key": "format",
									"value": "JSON"
								},
								{
									"key": "recipients",
									"value": "admin@example.com"
								}
							]
						},
						"description": "Start the Camunda report generation process"
					},
					"response": []
				},
				{
					"name": "Get Process Instance Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/process-instance/{{processInstanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"process-instance",
								"{{processInstanceId}}"
							]
						},
						"description": "Check the status of the Camunda process instance"
					},
					"response": []
				},
				{
					"name": "Get Active Tasks for Process",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task?processInstanceId={{processInstanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task"
							],
							"query": [
								{
									"key": "processInstanceId",
									"value": "{{processInstanceId}}"
								}
							]
						},
						"description": "Get the active tasks for the process instance"
					},
					"response": []
				},
				{
					"name": "Complete User Task (If Any)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Fetch the task ID first",
									"pm.sendRequest({",
									"    url: pm.variables.get(\"baseUrl\") + \"/engine-rest/task?processInstanceId=\" + pm.variables.get(\"processInstanceId\"),",
									"    method: 'GET'",
									"}, function (err, res) {",
									"    if (!err && res.json().length > 0) {",
									"        pm.variables.set(\"taskId\", res.json()[0].id);",
									"        console.log(\"Found task ID: \" + res.json()[0].id);",
									"    } else {",
									"        console.log(\"No tasks found or error occurred\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"approved\": { \"value\": true },\n        \"revisionNotes\": { \"value\": \"This report looks good\" }\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task/{{taskId}}/complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task",
								"{{taskId}}",
								"complete"
							]
						},
						"description": "Complete a user task in the process"
					},
					"response": []
				},
				{
					"name": "Get Process History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/history/activity-instance?processInstanceId={{processInstanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"history",
								"activity-instance"
							],
							"query": [
								{
									"key": "processInstanceId",
									"value": "{{processInstanceId}}"
								}
							]
						},
						"description": "Get the history of activities in the process"
					},
					"response": []
				}
			],
			"description": "Testing the Camunda workflow process for report generation"
		},
		{
			"name": "5. Audit & Compliance Flow",
			"item": [
				{
					"name": "Get All Action Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/audit/action-types",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"audit",
								"action-types"
							]
						},
						"description": "Get all available audit action types"
					},
					"response": []
				},
				{
					"name": "Get User Audit Trail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/audit/users/john_user1?startDate={{isoStartDate}}&endDate={{isoEndDate}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"audit",
								"users",
								"john_user1"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{isoStartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{isoEndDate}}"
								}
							]
						},
						"description": "Get the audit trail for a specific user"
					},
					"response": []
				},
				{
					"name": "Get SLA Violations Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/audit/violations/stats?startDate={{isoStartDate}}&endDate={{isoEndDate}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"audit",
								"violations",
								"stats"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{isoStartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{isoEndDate}}"
								}
							]
						},
						"description": "Get statistics about SLA violations"
					},
					"response": []
				},
				{
					"name": "Retry Failed Report Distributions",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reports/retry-distributions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reports",
								"retry-distributions"
							]
						},
						"description": "Retry any failed report distributions"
					},
					"response": []
				}
			],
			"description": "Testing the audit and compliance features"
		},
		{
			"name": "6. Multi-Level Approval Flow",
			"item": [
				{
					"name": "Create High-Complexity Dispute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.caseId) {",
									"    pm.collectionVariables.set(\"highComplexityCaseId\", jsonData.caseId);",
									"    console.log(\"Set high complexity case ID to: \" + jsonData.caseId);",
									"}",
									"if (jsonData.processId) {",
									"    pm.collectionVariables.set(\"processInstanceId\", jsonData.processId);",
									"    console.log(\"Set process instance ID to: \" + jsonData.processId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/test/high-complexity-dispute",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"test",
								"high-complexity-dispute"
							]
						},
						"description": "Create a high-complexity dispute that will trigger the multi-level approval process"
					},
					"response": []
				},
				{
					"name": "Get Dispute Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/disputes/{{highComplexityCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{highComplexityCaseId}}"
							]
						},
						"description": "Get details of the high-complexity dispute"
					},
					"response": []
				},
				{
					"name": "Get Open Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData && jsonData.length > 0) {",
									"    pm.collectionVariables.set(\"taskId\", jsonData[0].id);",
									"    console.log(\"Set task ID to: \" + jsonData[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task?processInstanceBusinessKey={{highComplexityCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task"
							],
							"query": [
								{
									"key": "processInstanceBusinessKey",
									"value": "{{highComplexityCaseId}}"
								}
							]
						},
						"description": "Get open tasks for the case"
					},
					"response": []
				},
				{
					"name": "Review & Approve (Initial Review)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"reviewDecision\": {\"value\": \"APPROVED\"},\n        \"notes\": {\"value\": \"Initial review approved, forwarding to multi-level approval.\"},\n        \"piiValidationStatus\": {\"value\": \"MATCH\"}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task/{{taskId}}/complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task",
								"{{taskId}}",
								"complete"
							]
						},
						"description": "Complete the initial review task with approval decision"
					},
					"response": []
				},
				{
					"name": "Check Process Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/history/process-instance?processInstanceBusinessKey={{highComplexityCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"history",
								"process-instance"
							],
							"query": [
								{
									"key": "processInstanceBusinessKey",
									"value": "{{highComplexityCaseId}}"
								}
							]
						},
						"description": "Check the status of the process instance"
					},
					"response": []
				},
				{
					"name": "Get Activity Instances",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/history/activity-instance?processInstanceBusinessKey={{highComplexityCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"history",
								"activity-instance"
							],
							"query": [
								{
									"key": "processInstanceBusinessKey",
									"value": "{{highComplexityCaseId}}"
								}
							]
						},
						"description": "Check the history of activities in the process"
					},
					"response": []
				},
				{
					"name": "Get Level 1 Approval Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData && jsonData.length > 0) {",
									"    pm.collectionVariables.set(\"level1TaskId\", jsonData[0].id);",
									"    console.log(\"Set Level 1 task ID to: \" + jsonData[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task?processInstanceId={{processInstanceId}}&taskDefinitionKeyLike=Level1Review",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task"
							],
							"query": [
								{
									"key": "processInstanceId",
									"value": "{{processInstanceId}}"
								},
								{
									"key": "taskDefinitionKeyLike",
									"value": "Level1Review"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Manual Approver Assignment Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData && jsonData.taskId) {",
									"    pm.collectionVariables.set(\"manualApproverTaskId\", jsonData.taskId);",
									"    console.log(\"Set manual approver task ID to: \" + jsonData.taskId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/approval-manual-assignments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"approval-manual-assignments"
							]
						},
						"description": "Get the manual approver assignment task if automatic assignment failed"
					},
					"response": []
				},
				{
					"name": "Complete Manual Approver Assignment (If Needed)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"level1ApproverUsername\": \"robertjohnson\",\n    \"level2ApproverUsername\": \"robertjohnson\",\n    \"level3ApproverUsername\": \"robertjohnson\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/approval-manual-assignment/{{manualApproverTaskId}}/complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"approval-manual-assignment",
								"{{manualApproverTaskId}}",
								"complete"
							]
						},
						"description": "If automatic assignment fails, this will manually assign approvers to all levels"
					},
					"response": []
				},
				{
					"name": "Complete Level 1 Approval",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"approvalDecision\": {\"value\": \"APPROVED\"},\n        \"approvalNotes\": {\"value\": \"Approved at Level 1, forwarding to Level 2.\"}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task/{{level1TaskId}}/complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task",
								"{{level1TaskId}}",
								"complete"
							]
						},
						"description": "Complete the Level 1 approval task"
					},
					"response": []
				},
				{
					"name": "Get Level 2 Approval Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData && jsonData.length > 0) {",
									"    pm.collectionVariables.set(\"level2TaskId\", jsonData[0].id);",
									"    console.log(\"Set Level 2 task ID to: \" + jsonData[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task?taskDefinitionKeyLike=Level2Review",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task"
							],
							"query": [
								{
									"key": "taskDefinitionKeyLike",
									"value": "Level2Review"
								}
							]
						},
						"description": "Get Level 2 approval tasks"
					},
					"response": []
				},
				{
					"name": "Complete Level 2 Approval",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"approvalDecision\": {\"value\": \"APPROVED\"},\n        \"approvalNotes\": {\"value\": \"Approved at Level 2, forwarding to Level 3.\"}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task/{{level2TaskId}}/complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task",
								"{{level2TaskId}}",
								"complete"
							]
						},
						"description": "Complete the Level 2 approval task"
					},
					"response": []
				},
				{
					"name": "Get Level 3 Approval Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData && jsonData.length > 0) {",
									"    pm.collectionVariables.set(\"level3TaskId\", jsonData[0].id);",
									"    console.log(\"Set Level 3 task ID to: \" + jsonData[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task?taskDefinitionKeyLike=Level3Review",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task"
							],
							"query": [
								{
									"key": "taskDefinitionKeyLike",
									"value": "Level3Review"
								}
							]
						},
						"description": "Get Level 3 approval tasks"
					},
					"response": []
				},
				{
					"name": "Complete Level 3 Approval",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"approvalDecision\": {\"value\": \"APPROVED\"},\n        \"approvalNotes\": {\"value\": \"Final approval at Level 3.\"}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/engine-rest/task/{{level3TaskId}}/complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"task",
								"{{level3TaskId}}",
								"complete"
							]
						},
						"description": "Complete the Level 3 approval task"
					},
					"response": []
				},
				{
					"name": "Check Final Dispute Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/disputes/{{highComplexityCaseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"disputes",
								"{{highComplexityCaseId}}"
							]
						},
						"description": "Check the final status of the dispute after multi-level approval"
					},
					"response": []
				},
				{
					"name": "Get Final Process Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/engine-rest/history/process-instance?processInstanceBusinessKey={{highComplexityCaseId}}&finished=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"engine-rest",
								"history",
								"process-instance"
							],
							"query": [
								{
									"key": "processInstanceBusinessKey",
									"value": "{{highComplexityCaseId}}"
								},
								{
									"key": "finished",
									"value": "true"
								}
							]
						},
						"description": "Check if the process has completed successfully"
					},
					"response": []
				},
				{
					"name": "Get Approval Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/approvals/{{highComplexityCaseId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"approvals",
								"{{highComplexityCaseId}}",
								"status"
							]
						},
						"description": "Get the detailed approval status"
					},
					"response": []
				},
				{
					"name": "Check Multi-Level Requirement",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/approvals/{{disputeCaseId}}/requires-multi-level",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"approvals",
								"{{disputeCaseId}}",
								"requires-multi-level"
							]
						},
						"description": "Check if a dispute requires multi-level approval"
					},
					"response": []
				},
				{
					"name": "Submit Level 1 Decision",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/approvals/{{disputeCaseId}}/level1?decision=APPROVED&notes=Approved at Level 1&username=level1_approver",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"approvals",
								"{{disputeCaseId}}",
								"level1"
							],
							"query": [
								{
									"key": "decision",
									"value": "APPROVED",
									"description": "Options: APPROVED, REJECTED, NEEDS_MORE_INFO"
								},
								{
									"key": "notes",
									"value": "Approved at Level 1",
									"description": "Notes about the decision"
								},
								{
									"key": "username",
									"value": "level1_approver",
									"description": "Username of the approver"
								}
							]
						},
						"description": "Submit a Level 1 approval decision"
					},
					"response": []
				},
				{
					"name": "Submit Level 2 Decision",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/approvals/{{disputeCaseId}}/level2?decision=APPROVED&notes=Approved at Level 2&username=level2_approver",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"approvals",
								"{{disputeCaseId}}",
								"level2"
							],
							"query": [
								{
									"key": "decision",
									"value": "APPROVED",
									"description": "Options: APPROVED, REJECTED, NEEDS_MORE_INFO"
								},
								{
									"key": "notes",
									"value": "Approved at Level 2",
									"description": "Notes about the decision"
								},
								{
									"key": "username",
									"value": "level2_approver",
									"description": "Username of the approver"
								}
							]
						},
						"description": "Submit a Level 2 approval decision"
					},
					"response": []
				},
				{
					"name": "Submit Level 3 Decision",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/approvals/{{disputeCaseId}}/level3?decision=APPROVED&notes=Final approval at Level 3&username=level3_approver",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"approvals",
								"{{disputeCaseId}}",
								"level3"
							],
							"query": [
								{
									"key": "decision",
									"value": "APPROVED",
									"description": "Options: APPROVED, REJECTED, NEEDS_MORE_INFO"
								},
								{
									"key": "notes",
									"value": "Final approval at Level 3",
									"description": "Notes about the decision"
								},
								{
									"key": "username",
									"value": "level3_approver",
									"description": "Username of the approver"
								}
							]
						},
						"description": "Submit a Level 3 approval decision"
					},
					"response": []
				}
			],
			"description": "Testing the multi-level approval process for complex cases"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set current date info",
					"const now = new Date();",
					"pm.collectionVariables.set(\"currentYear\", now.getFullYear());",
					"pm.collectionVariables.set(\"currentMonth\", now.getMonth() + 1);",
					"",
					"// Set ISO formatted dates for queries",
					"const startDate = new Date();",
					"startDate.setDate(startDate.getDate() - 7); // A week ago",
					"",
					"const endDate = new Date();",
					"endDate.setDate(endDate.getDate() + 1); // Tomorrow",
					"",
					"pm.collectionVariables.set(\"isoStartDate\", startDate.toISOString().split('T')[0] + \"T00:00:00\");",
					"pm.collectionVariables.set(\"isoEndDate\", endDate.toISOString().split('T')[0] + \"T23:59:59\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "disputeCaseId",
			"value": "",
			"type": "string"
		},
		{
			"key": "reportId",
			"value": "",
			"type": "string"
		},
		{
			"key": "processInstanceId",
			"value": "",
			"type": "string"
		},
		{
			"key": "taskId",
			"value": "",
			"type": "string"
		},
		{
			"key": "currentYear",
			"value": "",
			"type": "string"
		},
		{
			"key": "currentMonth",
			"value": "",
			"type": "string"
		},
		{
			"key": "isoStartDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "isoEndDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "highComplexityCaseId",
			"value": "",
			"type": "string"
		},
		{
			"key": "level1TaskId",
			"value": "",
			"type": "string"
		},
		{
			"key": "level2TaskId",
			"value": "",
			"type": "string"
		},
		{
			"key": "level3TaskId",
			"value": "",
			"type": "string"
		}
	]
} 